{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { BASE_URL } from \"../BASE_URL_FETCH_IP_ADDRESS/BASE_URL\";\nimport { initialState } from \"../INITIAL_STATE/INITIAL_STATE\";\nexport const getIpAddressTracker = createAsyncThunk(\"address/getIpAddress\", async url => {\n  url = `${BASE_URL}&ipAddress=${url}`;\n  console.log(url, \"<--- url\");\n  return await fetch(url).then(r => r.json());\n});\nexport const ipAddressTrackerSlice = createSlice({\n  name: \"ipAddress\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getIpAddressTracker.fulfilled, (state, action) => {\n      state.ipStatusFetch = \"success\";\n      state.addressTracker = action.payload;\n    });\n    builder.addCase(getIpAddressTracker.pending, state => {\n      state.ipStatusFetch = \"loading\";\n    });\n    builder.addCase(getIpAddressTracker.rejected, state => {\n      state.ipStatusFetch = \"failed\";\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/Piotr/Desktop/React-Projects/ip-address-tracker/src/features/ipAddressTrackerSlice/ipAddressTrackerSlice.js"],"names":["createSlice","createAsyncThunk","BASE_URL","initialState","getIpAddressTracker","url","console","log","fetch","then","r","json","ipAddressTrackerSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","ipStatusFetch","addressTracker","payload","pending","rejected"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,QAAT,QAAyB,uCAAzB;AACA,SAASC,YAAT,QAA6B,gCAA7B;AAEA,OAAO,MAAMC,mBAAmB,GAAGH,gBAAgB,CACjD,sBADiD,EAEjD,MAAOI,GAAP,IAAe;AACbA,EAAAA,GAAG,GAAI,GAAEH,QAAS,cAAaG,GAAI,EAAnC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAAiB,UAAjB;AACA,SAAO,MAAMG,KAAK,CAACH,GAAD,CAAL,CAAWI,IAAX,CAAiBC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAAvB,CAAb;AACD,CANgD,CAA5C;AASP,OAAO,MAAMC,qBAAqB,GAAGZ,WAAW,CAAC;AAC/Ca,EAAAA,IAAI,EAAE,WADyC;AAE/CV,EAAAA,YAF+C;AAG/CW,EAAAA,QAAQ,EAAE,EAHqC;AAI/CC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBb,mBAAmB,CAACc,SAApC,EAA+C,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChED,MAAAA,KAAK,CAACE,aAAN,GAAsB,SAAtB;AACAF,MAAAA,KAAK,CAACG,cAAN,GAAuBF,MAAM,CAACG,OAA9B;AACD,KAHD;AAIAP,IAAAA,OAAO,CAACC,OAAR,CAAgBb,mBAAmB,CAACoB,OAApC,EAA8CL,KAAD,IAAW;AACtDA,MAAAA,KAAK,CAACE,aAAN,GAAsB,SAAtB;AACD,KAFD;AAGAL,IAAAA,OAAO,CAACC,OAAR,CAAgBb,mBAAmB,CAACqB,QAApC,EAA+CN,KAAD,IAAW;AACvDA,MAAAA,KAAK,CAACE,aAAN,GAAsB,QAAtB;AACD,KAFD;AAGD;AAf8C,CAAD,CAAzC","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { BASE_URL } from \"../BASE_URL_FETCH_IP_ADDRESS/BASE_URL\";\r\nimport { initialState } from \"../INITIAL_STATE/INITIAL_STATE\";\r\n\r\nexport const getIpAddressTracker = createAsyncThunk(\r\n  \"address/getIpAddress\",\r\n  async (url) => {\r\n    url = `${BASE_URL}&ipAddress=${url}`;\r\n    console.log(url, \"<--- url\");\r\n    return await fetch(url).then((r) => r.json());\r\n  }\r\n);\r\n\r\nexport const ipAddressTrackerSlice = createSlice({\r\n  name: \"ipAddress\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder.addCase(getIpAddressTracker.fulfilled, (state, action) => {\r\n      state.ipStatusFetch = \"success\";\r\n      state.addressTracker = action.payload;\r\n    });\r\n    builder.addCase(getIpAddressTracker.pending, (state) => {\r\n      state.ipStatusFetch = \"loading\";\r\n    });\r\n    builder.addCase(getIpAddressTracker.rejected, (state) => {\r\n      state.ipStatusFetch = \"failed\";\r\n    });\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}