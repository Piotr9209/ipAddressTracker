{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { BASE_URL } from \"../BASE_URL_FETCH_IP_ADDRESS/BASE_URL\";\nimport { initialState } from \"../INITIAL_STATE/INITIAL_STATE\";\nexport const getDomainAddressTracker = createAsyncThunk(\"address/getEmailAddress\", async url => {\n  return await fetch(`${BASE_URL}&email=${url}`).then(r => r.json());\n});\nexport const emailAddressTracker = createSlice({\n  name: \"ipAddress\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getDomainAddressTracker.fulfilled, (state, action) => {\n      state.ipStatusFetch = \"success\";\n      state.addressTracker = action.payload;\n    });\n    builder.addCase(getDomainAddressTracker.pending, state => {\n      state.ipStatusFetch = \"loading\";\n    });\n    builder.addCase(getDomainAddressTracker.rejected, state => {\n      state.ipStatusFetch = \"failed\";\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/Piotr/Desktop/React-Projects/ip-address-tracker/src/features/ipAddressTrackerSlice/emailAddressTrackerSlice.js"],"names":["createSlice","createAsyncThunk","BASE_URL","initialState","getDomainAddressTracker","url","fetch","then","r","json","emailAddressTracker","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","ipStatusFetch","addressTracker","payload","pending","rejected"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,QAAT,QAAyB,uCAAzB;AACA,SAASC,YAAT,QAA6B,gCAA7B;AAEA,OAAO,MAAMC,uBAAuB,GAAGH,gBAAgB,CACrD,yBADqD,EAErD,MAAOI,GAAP,IAAe;AACb,SAAO,MAAMC,KAAK,CAAE,GAAEJ,QAAS,UAASG,GAAI,EAA1B,CAAL,CAAkCE,IAAlC,CAAwCC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAA9C,CAAb;AACD,CAJoD,CAAhD;AAOP,OAAO,MAAMC,mBAAmB,GAAGV,WAAW,CAAC;AAC7CW,EAAAA,IAAI,EAAE,WADuC;AAE7CR,EAAAA,YAF6C;AAG7CS,EAAAA,QAAQ,EAAE,EAHmC;AAI7CC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBX,uBAAuB,CAACY,SAAxC,EAAmD,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpED,MAAAA,KAAK,CAACE,aAAN,GAAsB,SAAtB;AACAF,MAAAA,KAAK,CAACG,cAAN,GAAuBF,MAAM,CAACG,OAA9B;AACD,KAHD;AAIAP,IAAAA,OAAO,CAACC,OAAR,CAAgBX,uBAAuB,CAACkB,OAAxC,EAAkDL,KAAD,IAAW;AAC1DA,MAAAA,KAAK,CAACE,aAAN,GAAsB,SAAtB;AACD,KAFD;AAGAL,IAAAA,OAAO,CAACC,OAAR,CAAgBX,uBAAuB,CAACmB,QAAxC,EAAmDN,KAAD,IAAW;AAC3DA,MAAAA,KAAK,CAACE,aAAN,GAAsB,QAAtB;AACD,KAFD;AAGD;AAf4C,CAAD,CAAvC","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { BASE_URL } from \"../BASE_URL_FETCH_IP_ADDRESS/BASE_URL\";\r\nimport { initialState } from \"../INITIAL_STATE/INITIAL_STATE\";\r\n\r\nexport const getDomainAddressTracker = createAsyncThunk(\r\n  \"address/getEmailAddress\",\r\n  async (url) => {\r\n    return await fetch(`${BASE_URL}&email=${url}`).then((r) => r.json());\r\n  }\r\n);\r\n\r\nexport const emailAddressTracker = createSlice({\r\n  name: \"ipAddress\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder.addCase(getDomainAddressTracker.fulfilled, (state, action) => {\r\n      state.ipStatusFetch = \"success\";\r\n      state.addressTracker = action.payload;\r\n    });\r\n    builder.addCase(getDomainAddressTracker.pending, (state) => {\r\n      state.ipStatusFetch = \"loading\";\r\n    });\r\n    builder.addCase(getDomainAddressTracker.rejected, (state) => {\r\n      state.ipStatusFetch = \"failed\";\r\n    });\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}